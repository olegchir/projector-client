{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Projector \u00b6 Projector is a technology to run and access Swing GUI applications remotely. Here you can find Projector documentation. Use the navigation menu to move between pages. The state of the Projector \u00b6 Currently, it is in a private preview stage. Please evaluate it and send your feedback to the Projector team. Your feedback is vital for understanding the Projector's future and prototyping its new features. You can report any issues here: https://youtrack.jetbrains.com/issues/PRJ . Feel free to report any bug or submit a feature request: every single opinion is important.","title":"Home"},{"location":"#welcome-to-projector","text":"Projector is a technology to run and access Swing GUI applications remotely. Here you can find Projector documentation. Use the navigation menu to move between pages.","title":"Welcome to Projector"},{"location":"#the-state-of-the-projector","text":"Currently, it is in a private preview stage. Please evaluate it and send your feedback to the Projector team. Your feedback is vital for understanding the Projector's future and prototyping its new features. You can report any issues here: https://youtrack.jetbrains.com/issues/PRJ . Feel free to report any bug or submit a feature request: every single opinion is important.","title":"The state of the Projector"},{"location":"about/coc/","text":"This project and the corresponding community is governed by the JetBrains Open Source and Community Code of Conduct . Please make sure you read it.","title":"Code of conduct"},{"location":"about/comparison/","text":"Here we formulate the pros of Projector: Since our goal is to support only AWT apps, Projector is more compact than more general remote access software like RDP or VNC. You don't even have to install special apps anywhere: on a server-side, you need only JRE, but there is one because your app is a Java app; on a client-side, you need only a Web browser, and you have it on almost any device. Since Projector Server knows about AWT components , some of them can be serialized in a special way to be shown on a client natively . The example is the Markdown Preview of JetBrains IDEs. Projector supports simultaneous client connections to the same application instance.","title":"Comparison to other remote access solutions"},{"location":"about/contributing/","text":"Thank you for reading this: we welcome any contributions. All Projector-related projects have the same contributing guidelines. This is the place where they are described. Creating an issue \u00b6 You can create issues in our issue tracker . If you report a bug , please either describe reproduction steps or mention that you don't know how to reproduce it stably. You can also suggest a feature . Please don't forget to specify fields of the ticket (in the top right corner): type (bug/feature/usability problem), subsystem (if you not sure, we have a special item), affected versions. If you've found the same ticket, please avoid creating a duplicate. Better vote (and comment with more info) for the existing! Submitting changes \u00b6 If you want to resolve an issue submitted in the issue tracker or propose a minor edit , open a Pull Request. Better don't include multiple changes in a single PR, create separate. Pre-commit actions . Before committing, please ensure that code style is correct. If you use IntelliJ IDEA, you can just select the following checkboxes of \"Before Commit\" actions: Reformat code Rearrange code Optimize imports Cleanup Commits naming . If there are issues that you address, please mention them in the prefix of commit messages. Usually, a commit name starts with a verb. Example: PRJ-68 Make clipboard owners lose ownership when clipboard is changed by a client .","title":"Contributing"},{"location":"about/contributing/#creating-an-issue","text":"You can create issues in our issue tracker . If you report a bug , please either describe reproduction steps or mention that you don't know how to reproduce it stably. You can also suggest a feature . Please don't forget to specify fields of the ticket (in the top right corner): type (bug/feature/usability problem), subsystem (if you not sure, we have a special item), affected versions. If you've found the same ticket, please avoid creating a duplicate. Better vote (and comment with more info) for the existing!","title":"Creating an issue"},{"location":"about/contributing/#submitting-changes","text":"If you want to resolve an issue submitted in the issue tracker or propose a minor edit , open a Pull Request. Better don't include multiple changes in a single PR, create separate. Pre-commit actions . Before committing, please ensure that code style is correct. If you use IntelliJ IDEA, you can just select the following checkboxes of \"Before Commit\" actions: Reformat code Rearrange code Optimize imports Cleanup Commits naming . If there are issues that you address, please mention them in the prefix of commit messages. Usually, a commit name starts with a verb. Example: PRJ-68 Make clipboard owners lose ownership when clipboard is changed by a client .","title":"Submitting changes"},{"location":"about/usecases/","text":"We believe there are many cases when you may want to use Projector. Let's enumerate some of them to inspire you: Not running a Swing IDE on a high-end laptop, but running it on a server and accessing it via a thin client : Usually, high-end laptops cost more than a server with comparable performance and a thin client. A thin client not only has a relatively small price but also it doesn't contain any valuable data , so a case of its loss is not a big deal. Thin clients are more mobile : you aren't restricted to use only x86, you can select ARM and devices that are cooler, more compact, and have longer battery life, for example, you can use iPad and a keyboard instead of MacBook. Not remote debugging in a local Swing IDE, but accessing a remote Swing IDE doing local debugging. Not coding in nano or vim over ssh but copying a Swing IDE and Projector there and access it. Run your Swing IDE in a Linux environment but on Windows : you can simply run it via Projector Server in WSL and use a client in Windows. This is easier than other methods such as installing X Server to WSL or using a visual virtual machine. Do pair programming sessions remotely: multiple clients can simultaneously connect to the same Swing IDE and interact with it in rotation. You can turn your device off while your app continues work on a server. For example, if your project is so huge that it takes a night to compile it fully, you can leave this task for a server and take your device with you without risk of overheating in your bag.","title":"Use cases"},{"location":"about/versions/","text":"Versions \u00b6 Projector currently doesn't have consistent versioning. It's yet to decide ( PRJ-34 ). Currently, each subproject uses its own versions. Changelogs \u00b6 projector-plugin . projector-server . projector-installer . projector-launcher . If we decide to make the versions the same for all the projects, the changelog will be moved here.","title":"Versions"},{"location":"about/versions/#versions","text":"Projector currently doesn't have consistent versioning. It's yet to decide ( PRJ-34 ). Currently, each subproject uses its own versions.","title":"Versions"},{"location":"about/versions/#changelogs","text":"projector-plugin . projector-server . projector-installer . projector-launcher . If we decide to make the versions the same for all the projects, the changelog will be moved here.","title":"Changelogs"},{"location":"dev_guide/ecosystem/","text":"This document describes the ecosystem as a whole. If you want to understand how Projector works and maybe even change something, please check this document out. TL;DR \u00b6 Projector is a way to run Swing applications without any windowing system and accessing them either locally or remotely. The system \u00b6 Here you can find some info on how this works. AWT implementation \u00b6 The Foundation stone of Projector is an implementation of AWT. It allows running Swing applications headlessly but without HeadlessException s. Also, it intercepts some AWT calls and remembers them. The most calls are invocations of Graphics2D methods. This module is called projector-awt . Update is needed This documentation is a bit deprecated because it doesn't mention that currently we also can run Swing apps with Projector without custom AWT. This allows running apps with GUI, but simultaneously share them via Projector. Server and client \u00b6 To run an application with our AWT and access it, we provide a server and a client. The module of the server implementation is called projector-server . It provides a launcher that sets AWT system properties and fields and is compatible with the most of Swing apps. Also, it extracts remembered AWT calls from projector-awt and can send them on a client. This implementation uses WebSocket and a serialization protocol which is located in the projector-common module. A client can execute the received calls on its side. The only client implemented now is for Web browsers, it's available in the projector-client-web module. Finally, the client can send its events such as mouse clicks or window resizes in the reverse direction. projector-server translates these events to AWT. Client components \u00b6 Some Swing apps contain content that can't be easily represented as Graphics2D method calls. For example, it can be an embedded heavyweight component. In such cases, it's sometimes possible to serialize this content another way. The only client component implemented now is Markdown Preview in JetBrains IDEs. Repositories \u00b6 Here we enumerate repos related to this project and describe their content. Main \u00b6 projector-client : projector-common \u2014 protocol and other common code for clients and a server. projector-client-common \u2014 common code for clients. projector-client-web \u2014 a client implementation for Web browsers. projector-server : projector-awt \u2014 AWT implementation. projector-server \u2014 an application server for running and remote accessing a Swing app. Examples and utils \u00b6 projector-demo \u2014 a sample app showing how to run any Swing app with Projector. projector-docker \u2014 scripts for building Docker images containing JetBrains IDEs and Projector Server. projector-installer \u2014 a utility for installing, configuring, and running JetBrains IDEs with projector-server on Linux or in WSL, available at PyPI. Obsolete \u00b6 projector-markdown-plugin \u2014 Markdown Preview for JetBrains IDEs which can be used with Projector. Now we managed to bundle it to projector-server, so you don't need to install it separately anymore. How to use in another project \u00b6 You can find some hints in the corresponding repos. You can use JitPack to make a dependency on our project. Also, you can clone a project and build it yourself. We show these ways in example repos.","title":"Ecosystem"},{"location":"dev_guide/ecosystem/#tldr","text":"Projector is a way to run Swing applications without any windowing system and accessing them either locally or remotely.","title":"TL;DR"},{"location":"dev_guide/ecosystem/#the-system","text":"Here you can find some info on how this works.","title":"The system"},{"location":"dev_guide/ecosystem/#awt-implementation","text":"The Foundation stone of Projector is an implementation of AWT. It allows running Swing applications headlessly but without HeadlessException s. Also, it intercepts some AWT calls and remembers them. The most calls are invocations of Graphics2D methods. This module is called projector-awt . Update is needed This documentation is a bit deprecated because it doesn't mention that currently we also can run Swing apps with Projector without custom AWT. This allows running apps with GUI, but simultaneously share them via Projector.","title":"AWT implementation"},{"location":"dev_guide/ecosystem/#server-and-client","text":"To run an application with our AWT and access it, we provide a server and a client. The module of the server implementation is called projector-server . It provides a launcher that sets AWT system properties and fields and is compatible with the most of Swing apps. Also, it extracts remembered AWT calls from projector-awt and can send them on a client. This implementation uses WebSocket and a serialization protocol which is located in the projector-common module. A client can execute the received calls on its side. The only client implemented now is for Web browsers, it's available in the projector-client-web module. Finally, the client can send its events such as mouse clicks or window resizes in the reverse direction. projector-server translates these events to AWT.","title":"Server and client"},{"location":"dev_guide/ecosystem/#client-components","text":"Some Swing apps contain content that can't be easily represented as Graphics2D method calls. For example, it can be an embedded heavyweight component. In such cases, it's sometimes possible to serialize this content another way. The only client component implemented now is Markdown Preview in JetBrains IDEs.","title":"Client components"},{"location":"dev_guide/ecosystem/#repositories","text":"Here we enumerate repos related to this project and describe their content.","title":"Repositories"},{"location":"dev_guide/ecosystem/#main","text":"projector-client : projector-common \u2014 protocol and other common code for clients and a server. projector-client-common \u2014 common code for clients. projector-client-web \u2014 a client implementation for Web browsers. projector-server : projector-awt \u2014 AWT implementation. projector-server \u2014 an application server for running and remote accessing a Swing app.","title":"Main"},{"location":"dev_guide/ecosystem/#examples-and-utils","text":"projector-demo \u2014 a sample app showing how to run any Swing app with Projector. projector-docker \u2014 scripts for building Docker images containing JetBrains IDEs and Projector Server. projector-installer \u2014 a utility for installing, configuring, and running JetBrains IDEs with projector-server on Linux or in WSL, available at PyPI.","title":"Examples and utils"},{"location":"dev_guide/ecosystem/#obsolete","text":"projector-markdown-plugin \u2014 Markdown Preview for JetBrains IDEs which can be used with Projector. Now we managed to bundle it to projector-server, so you don't need to install it separately anymore.","title":"Obsolete"},{"location":"dev_guide/ecosystem/#how-to-use-in-another-project","text":"You can find some hints in the corresponding repos. You can use JitPack to make a dependency on our project. Also, you can clone a project and build it yourself. We show these ways in example repos.","title":"How to use in another project"},{"location":"ij_user_guide/accessing/","text":"Accessing remote app (clients) \u00b6 To access a remotely run app, you need to use a client. There are multiple variants available. Client Supported platforms Web browser Any Client app (\"launcher\") Windows, Linux, MacOS Web browser \u00b6 Bundled client \u00b6 Recent versions of servers have bundled client files. So for example if you start a server on port 9999, you can access it via a browser locally opening http://localhost:9999/ (or https://... if your server is secure). If your server is located remotely, just use the corresponding host address instead of localhost . Latest client \u00b6 The latest client is always available at our site: https://projector.jetbrains.com/client/?host=HOST&port=PORT . So this variant is useful if you want to check out the recent update in the client. You should set HOST and PORT matching your server. For the previous example, it will be https://projector.jetbrains.com/client/?host=localhost&port=9999 . Secure connection is required for the latest client Your server must be secure when using the latest client because our domain is secure itself. Before connection, make sure that your browser trusts the certificate you use on your server (in this case, connection via the bundled client should succeed). For more info, read below . Known issues \u00b6 Due to limitations of web browsers, there are some issues in the Web Client. They can be solved via native implementations of the client. iPad as a client \u00b6 iPads don't support self-signed WebSockets, so if you want to use a browser on iPad as a client, you now have to disable security on the server. Some hotkeys are intercepted by the browser \u00b6 For example, Ctrl+Q in Windows/Linux or Cmd+N in Mac is handled by the browser. Since some shortcuts close the tab or the window, we implemented a confirmation which is shown when the page is about to close (if blockClosing parameter is enabled). Also, we consider Ctrl+Q shortcut as frequently used, so we mapped it to the F1 button. It seems that we can't do anything more about that, at least in a normal browser window. The proposed workaround here is to you the feature of browsers called PWA . It's a way to install a web page as a separate application. We've tested it in Chrome and in this mode, all the tested shortcuts are handled by Projector, not by the browser. The instructions are as follows: simply create a shortcut by selecting Menu | More Tools | Create Shortcut... and Open as window . Instructions with screenshots can be googled, for example, this one . The similar can be achieved in Firefox: for example, take this instruction. Incomplete clipboard synchronization \u00b6 There are some limitations with clipboard. To-server \u00b6 When your clipboard is changed on the client side, the server needs to apply the change on its side. We implement it on the client side via setting \"paste\" listener . So clipboard is updated on the server only if you invoke that listener, for example, by hitting Ctrl+V or Ctrl+Shift+V. If you have an application on the server side with a \"paste\" button, a click on it can paste outdated information unless the listener wasn't invoked . Unfortunately, we can't just continuously get clipboard data from window.navigator.clipboard and send it to the server because when it's invoked not from user's context, there will be alert from the browser like \"the site wants to read clipboard info, do you grant?\". To-client \u00b6 It's vice versa: when your clipboard is changed on the server side, the client needs to apply the change on its side. We set the clipboard on the client side via window.navigator.clipboard . This doesn't work in insecure contexts , so the client needs to be opened using HTTPS or on localhost to support this . We can't use \"copy\" listener because when this event is generated, we don't have a message from the server with actual clipboard data yet. Also, this method won't work if you click a \"copy\" button in your application. It's not possible to connect to insecure WebSocket from a secure web page \u00b6 This is a limitation of browsers. So for example you can't use client at https://projector.jetbrains.com/client/ to access an insecure server. Advanced options and shortcuts \u00b6 The web client has some hidden options and keyboard shortcuts . Please use the links if you want to know more info. In the future, welcome screen ( PRJ-126 ) and actions panel ( PRJ-248 ) will make these features more explicit. Client app (\"launcher\") \u00b6 Also, we have a special app called launcher that wraps web page and allows to overcome some limitations of web browsers such as shortcut interception and low performance . Currently, it's a small app, and it's easy to use. It has just a single text field for the URL you want to connect. Downloading \u00b6 Please check releases beginning with the launcher- prefix. Download the file for your OS. Running \u00b6 After unpacking the archive, run the executable file corresponding to your OS (see below). If you don't want to specify the URL in the GUI every time, you can create a shortcut or run this app from command line passing the URL as the first argument. Windows \u00b6 Run projector.exe file. Linux \u00b6 Run projector file. Mac (darwin) \u00b6 Run projector app (on other OSes it's visible like projector.app dir). We publish signed notarized and unsigned version of the app. If you want to run the app easily , please use the signed notarized version. If you want to try the unsigned version, Mac doesn't allow unsigned apps to be run easily, and will ask you to put the app to Trash Bin. So you need to select \"Open Anyway\" in System Preferences to allow launching. We believe the only advantage of the unsigned version is that it's available right away after the new release, and we need some more time to publish the signed notarized version.","title":"Accessing remote app \u2013 clients"},{"location":"ij_user_guide/accessing/#accessing-remote-app-clients","text":"To access a remotely run app, you need to use a client. There are multiple variants available. Client Supported platforms Web browser Any Client app (\"launcher\") Windows, Linux, MacOS","title":"Accessing remote app (clients)"},{"location":"ij_user_guide/accessing/#web-browser","text":"","title":"Web browser"},{"location":"ij_user_guide/accessing/#bundled-client","text":"Recent versions of servers have bundled client files. So for example if you start a server on port 9999, you can access it via a browser locally opening http://localhost:9999/ (or https://... if your server is secure). If your server is located remotely, just use the corresponding host address instead of localhost .","title":"Bundled client"},{"location":"ij_user_guide/accessing/#latest-client","text":"The latest client is always available at our site: https://projector.jetbrains.com/client/?host=HOST&port=PORT . So this variant is useful if you want to check out the recent update in the client. You should set HOST and PORT matching your server. For the previous example, it will be https://projector.jetbrains.com/client/?host=localhost&port=9999 . Secure connection is required for the latest client Your server must be secure when using the latest client because our domain is secure itself. Before connection, make sure that your browser trusts the certificate you use on your server (in this case, connection via the bundled client should succeed). For more info, read below .","title":"Latest client"},{"location":"ij_user_guide/accessing/#known-issues","text":"Due to limitations of web browsers, there are some issues in the Web Client. They can be solved via native implementations of the client.","title":"Known issues"},{"location":"ij_user_guide/accessing/#ipad-as-a-client","text":"iPads don't support self-signed WebSockets, so if you want to use a browser on iPad as a client, you now have to disable security on the server.","title":"iPad as a client"},{"location":"ij_user_guide/accessing/#some-hotkeys-are-intercepted-by-the-browser","text":"For example, Ctrl+Q in Windows/Linux or Cmd+N in Mac is handled by the browser. Since some shortcuts close the tab or the window, we implemented a confirmation which is shown when the page is about to close (if blockClosing parameter is enabled). Also, we consider Ctrl+Q shortcut as frequently used, so we mapped it to the F1 button. It seems that we can't do anything more about that, at least in a normal browser window. The proposed workaround here is to you the feature of browsers called PWA . It's a way to install a web page as a separate application. We've tested it in Chrome and in this mode, all the tested shortcuts are handled by Projector, not by the browser. The instructions are as follows: simply create a shortcut by selecting Menu | More Tools | Create Shortcut... and Open as window . Instructions with screenshots can be googled, for example, this one . The similar can be achieved in Firefox: for example, take this instruction.","title":"Some hotkeys are intercepted by the browser"},{"location":"ij_user_guide/accessing/#incomplete-clipboard-synchronization","text":"There are some limitations with clipboard.","title":"Incomplete clipboard synchronization"},{"location":"ij_user_guide/accessing/#to-server","text":"When your clipboard is changed on the client side, the server needs to apply the change on its side. We implement it on the client side via setting \"paste\" listener . So clipboard is updated on the server only if you invoke that listener, for example, by hitting Ctrl+V or Ctrl+Shift+V. If you have an application on the server side with a \"paste\" button, a click on it can paste outdated information unless the listener wasn't invoked . Unfortunately, we can't just continuously get clipboard data from window.navigator.clipboard and send it to the server because when it's invoked not from user's context, there will be alert from the browser like \"the site wants to read clipboard info, do you grant?\".","title":"To-server"},{"location":"ij_user_guide/accessing/#to-client","text":"It's vice versa: when your clipboard is changed on the server side, the client needs to apply the change on its side. We set the clipboard on the client side via window.navigator.clipboard . This doesn't work in insecure contexts , so the client needs to be opened using HTTPS or on localhost to support this . We can't use \"copy\" listener because when this event is generated, we don't have a message from the server with actual clipboard data yet. Also, this method won't work if you click a \"copy\" button in your application.","title":"To-client"},{"location":"ij_user_guide/accessing/#its-not-possible-to-connect-to-insecure-websocket-from-a-secure-web-page","text":"This is a limitation of browsers. So for example you can't use client at https://projector.jetbrains.com/client/ to access an insecure server.","title":"It's not possible to connect to insecure WebSocket from a secure web page"},{"location":"ij_user_guide/accessing/#advanced-options-and-shortcuts","text":"The web client has some hidden options and keyboard shortcuts . Please use the links if you want to know more info. In the future, welcome screen ( PRJ-126 ) and actions panel ( PRJ-248 ) will make these features more explicit.","title":"Advanced options and shortcuts"},{"location":"ij_user_guide/accessing/#client-app-launcher","text":"Also, we have a special app called launcher that wraps web page and allows to overcome some limitations of web browsers such as shortcut interception and low performance . Currently, it's a small app, and it's easy to use. It has just a single text field for the URL you want to connect.","title":"Client app (\"launcher\")"},{"location":"ij_user_guide/accessing/#downloading","text":"Please check releases beginning with the launcher- prefix. Download the file for your OS.","title":"Downloading"},{"location":"ij_user_guide/accessing/#running","text":"After unpacking the archive, run the executable file corresponding to your OS (see below). If you don't want to specify the URL in the GUI every time, you can create a shortcut or run this app from command line passing the URL as the first argument.","title":"Running"},{"location":"ij_user_guide/accessing/#windows","text":"Run projector.exe file.","title":"Windows"},{"location":"ij_user_guide/accessing/#linux","text":"Run projector file.","title":"Linux"},{"location":"ij_user_guide/accessing/#mac-darwin","text":"Run projector app (on other OSes it's visible like projector.app dir). We publish signed notarized and unsigned version of the app. If you want to run the app easily , please use the signed notarized version. If you want to try the unsigned version, Mac doesn't allow unsigned apps to be run easily, and will ask you to put the app to Trash Bin. So you need to select \"Open Anyway\" in System Preferences to allow launching. We believe the only advantage of the unsigned version is that it's available right away after the new release, and we need some more time to publish the signed notarized version.","title":"Mac (darwin)"},{"location":"ij_user_guide/jetbrains/","text":"Current JetBrains IDEs use Swing to draw GUI . The same is true for other IntelliJ-based apps like Android Studio . Therefore, Projector that is a technology for rendering Swing GUI over the network is a good way to run and access these apps remotely. It should be compatible with all existing JetBrains IDEs. This section of documentation describes how Projector is adapted to IntelliJ-based apps. Use cases \u00b6 We believe there are many cases when you may want to use Projector. Let's enumerate some of them to inspire you: Running the code from IDE located near the runtime (whatever it is) or near the database to reduce roundtrips; High-security zones and corporate environments; Really huge projects ; No source code on a laptop; Slow or hot users\u2019 laptops ; Thin clients and cheap hardware like Android tablets; Running the IDE in a GNU/Linux environment on Windows machines or even on exotic operating systems like ChromeOS; The ability to turn off your computer, while your app continues to work on the server; Slow internet connection; Remote debugging on a server-side (devtest, devprod); VM or Docker images with debug sources and pre-configured IDE. Any configuration that requires remote access. Don't understand some items? We have a special list where we describe them more comprehensively. IntelliJ IDEA on Android tablet (Huawei MediaPad M5) Quick start \u00b6 You should decide how you run a remote IDE and how you access it. This info is given comprehensively at servers and clients pages respectively. The easiest way to try the project is to use Docker Images . If you can't use Docker for some reasons (for example, due to any security limitations), try this installation script . If you can't even use this installation script, you need to dive deeper and understand how it works under the hood. You can check README here: https://github.com/JetBrains/projector-server . As for the client-side, just open the URL (something like https://127.0.0.1:8887 ) in the browser, and that\u2019s it. Client-side \u00b6 Currently, you can use a web browser to connect to the IDE. The experience is very similar to using any interactive website. You can use a fullscreen mode in your browser to achieve an almost desktop-like experience. If there is a demand from users, in the next stages we may build separate native applications. Server-side \u00b6 You can use the Projector as a set of Docker images, or as a standalone distribution. A standalone distribution is currently available for GNU/Linux hosts only. Dockerfiles are public and Open Source, so you can verify them with your security team. VPN and SSH tunnels \u00b6 The Projector should run on popular VPN solutions like OpenVPN. It uses the HTTP and WebSocket protocols to connect to the browser. You shouldn't have any problems with that. Also, you can use the following SSH command to redirect these ports through a plain SSH tunnel : ssh -i key.pem -L 8887:127.0.0.1:8887 user@server You can try this on the Amazon cloud. Competitors \u00b6 The \u0441losest competitors to the Projector are X Window System, VNC, and RDP. One the one hand, the Projector is much more responsive. Unlike all these alternatives, it uses extended and precise information about applications written in Java (which all JetBrains IDEs are) and sends it over the network. For example, that allows rendering crisp, pixel-perfect vector fonts. And it doesn't matter if your connection is slow or not, your text always is perfect, because the fonts are all in a vector format. On the other hand, X11, VNC, and RDP are well-known solutions, and system administrators know exactly how to run them in a corporate environment. Also, we have a special documentation page where we list advantages of Projector. Is it Open Source? \u00b6 Now, everything is an Open Source or Free Software: Dockerfiles (Apache License 2.0): https://github.com/JetBrains/projector-docker . Server (GNU GPL v2.0): https://github.com/JetBrains/projector-server . Client (MIT License): https://github.com/JetBrains/projector-client . Known problems \u00b6 The server side is supported as a Docker Image and as a local distribution for Linux servers. Local installations of the server on Windows and Mac are not a subject for the current stage of the project. However, technically it is quite possible. We still have some inconsistencies in shortcuts. For example, a known problem is that we cannot use Ctrl+W to close a source file, because it closes a tab in the browser. The only action Projector can do here is to ask the user if they really want to close that tab. In the future, we can create separate native apps instead of the browser client to fix this. There's a known limitation on using plugins with a custom rendering provided by Chromium Embedded Framework because it bypasses the standard rendering pipeline of Java. It's a hard problem, probably we can fix this, but not at this stage. Now we have a smart workaround for the Markdown component: we render Markdown HTML locally on a client. Actually, it even improved the experience of writing markdown a lot. We cannot render separate external applications. For example, if you run the Android Emulator by activating a Run/Debug configuration, and expect to see GUI , it's impossible to render it with the Projector. In the future, it may be solved by combining with VNC technologies, but it's definitely not a target of the current stage.","title":"JetBrains IDEs"},{"location":"ij_user_guide/jetbrains/#use-cases","text":"We believe there are many cases when you may want to use Projector. Let's enumerate some of them to inspire you: Running the code from IDE located near the runtime (whatever it is) or near the database to reduce roundtrips; High-security zones and corporate environments; Really huge projects ; No source code on a laptop; Slow or hot users\u2019 laptops ; Thin clients and cheap hardware like Android tablets; Running the IDE in a GNU/Linux environment on Windows machines or even on exotic operating systems like ChromeOS; The ability to turn off your computer, while your app continues to work on the server; Slow internet connection; Remote debugging on a server-side (devtest, devprod); VM or Docker images with debug sources and pre-configured IDE. Any configuration that requires remote access. Don't understand some items? We have a special list where we describe them more comprehensively. IntelliJ IDEA on Android tablet (Huawei MediaPad M5)","title":"Use cases"},{"location":"ij_user_guide/jetbrains/#quick-start","text":"You should decide how you run a remote IDE and how you access it. This info is given comprehensively at servers and clients pages respectively. The easiest way to try the project is to use Docker Images . If you can't use Docker for some reasons (for example, due to any security limitations), try this installation script . If you can't even use this installation script, you need to dive deeper and understand how it works under the hood. You can check README here: https://github.com/JetBrains/projector-server . As for the client-side, just open the URL (something like https://127.0.0.1:8887 ) in the browser, and that\u2019s it.","title":"Quick start"},{"location":"ij_user_guide/jetbrains/#client-side","text":"Currently, you can use a web browser to connect to the IDE. The experience is very similar to using any interactive website. You can use a fullscreen mode in your browser to achieve an almost desktop-like experience. If there is a demand from users, in the next stages we may build separate native applications.","title":"Client-side"},{"location":"ij_user_guide/jetbrains/#server-side","text":"You can use the Projector as a set of Docker images, or as a standalone distribution. A standalone distribution is currently available for GNU/Linux hosts only. Dockerfiles are public and Open Source, so you can verify them with your security team.","title":"Server-side"},{"location":"ij_user_guide/jetbrains/#vpn-and-ssh-tunnels","text":"The Projector should run on popular VPN solutions like OpenVPN. It uses the HTTP and WebSocket protocols to connect to the browser. You shouldn't have any problems with that. Also, you can use the following SSH command to redirect these ports through a plain SSH tunnel : ssh -i key.pem -L 8887:127.0.0.1:8887 user@server You can try this on the Amazon cloud.","title":"VPN and SSH tunnels"},{"location":"ij_user_guide/jetbrains/#competitors","text":"The \u0441losest competitors to the Projector are X Window System, VNC, and RDP. One the one hand, the Projector is much more responsive. Unlike all these alternatives, it uses extended and precise information about applications written in Java (which all JetBrains IDEs are) and sends it over the network. For example, that allows rendering crisp, pixel-perfect vector fonts. And it doesn't matter if your connection is slow or not, your text always is perfect, because the fonts are all in a vector format. On the other hand, X11, VNC, and RDP are well-known solutions, and system administrators know exactly how to run them in a corporate environment. Also, we have a special documentation page where we list advantages of Projector.","title":"Competitors"},{"location":"ij_user_guide/jetbrains/#is-it-open-source","text":"Now, everything is an Open Source or Free Software: Dockerfiles (Apache License 2.0): https://github.com/JetBrains/projector-docker . Server (GNU GPL v2.0): https://github.com/JetBrains/projector-server . Client (MIT License): https://github.com/JetBrains/projector-client .","title":"Is it Open Source?"},{"location":"ij_user_guide/jetbrains/#known-problems","text":"The server side is supported as a Docker Image and as a local distribution for Linux servers. Local installations of the server on Windows and Mac are not a subject for the current stage of the project. However, technically it is quite possible. We still have some inconsistencies in shortcuts. For example, a known problem is that we cannot use Ctrl+W to close a source file, because it closes a tab in the browser. The only action Projector can do here is to ask the user if they really want to close that tab. In the future, we can create separate native apps instead of the browser client to fix this. There's a known limitation on using plugins with a custom rendering provided by Chromium Embedded Framework because it bypasses the standard rendering pipeline of Java. It's a hard problem, probably we can fix this, but not at this stage. Now we have a smart workaround for the Markdown component: we render Markdown HTML locally on a client. Actually, it even improved the experience of writing markdown a lot. We cannot render separate external applications. For example, if you run the Android Emulator by activating a Run/Debug configuration, and expect to see GUI , it's impossible to render it with the Projector. In the future, it may be solved by combining with VNC technologies, but it's definitely not a target of the current stage.","title":"Known problems"},{"location":"ij_user_guide/running/","text":"Running remote app (servers) \u00b6 To run an app with Projector, you need to create a server. There are multiple variants available. Variant Supported platforms Mode installer Linux Headless Docker Any Headless IDE Plugin Any GUI Mode \u00b6 There are two ways of how the server is run: GUI mode \u2013 you can see the app where you launch it, and also connect to it remotely at the same time. Headless mode \u2013 you can't see the app, you only can connect to it remotely. Differences \u00b6 You may wonder what to choose. Let's describe some differences that should help you decide. Currently, headless mode is available only on Linux (or inside Docker). On the other hand, GUI mode is available everywhere. Headless mode doesn't require Desktop Environment nor XServer nor virtual framebuffer to be available on the device, while GUI mode in Linux obviously does. This makes Projector be able to run on headless machines such as servers in clouds. Headless mode can adapt to the connected client machine better, especially when the client has different screen parameters (DPI, resolution). installer \u00b6 Installer is a console application that allows to install, configure, and run JetBrains IDEs with Projector. Currently it works on Linux or in WSL . The IDE will be run headlessly . You can find instructions in the corresponding repo: https://github.com/JetBrains/projector-installer . Docker \u00b6 We have a sample Docker script that allows you to generate Docker images containing JetBrains IDEs and Projector inside. This allows you to run IDEs anywhere where Docker is available. The IDE will be run headlessly and isolated inside Docker. You can find instructions in the corresponding repo: https://github.com/JetBrains/projector-docker . IDE Plugin \u00b6 Another way of running Projector is in GUI mode. To perform this with JetBrains IDEs, we have a plugin for IDEs. You need to install the plugin. After that, the plugin will provide controls to start the screen sharing. This can be useful when you have a workstation with GUI, but need to have an option to leave the workplace and resume the work remotely. With IDE plugin that supports GUI, you don't need to restart already opened IDE. You can find instructions in the corresponding repo: https://github.com/JetBrains/projector-server/tree/master/projector-plugin .","title":"Running remote app \u2013 servers"},{"location":"ij_user_guide/running/#running-remote-app-servers","text":"To run an app with Projector, you need to create a server. There are multiple variants available. Variant Supported platforms Mode installer Linux Headless Docker Any Headless IDE Plugin Any GUI","title":"Running remote app (servers)"},{"location":"ij_user_guide/running/#mode","text":"There are two ways of how the server is run: GUI mode \u2013 you can see the app where you launch it, and also connect to it remotely at the same time. Headless mode \u2013 you can't see the app, you only can connect to it remotely.","title":"Mode"},{"location":"ij_user_guide/running/#differences","text":"You may wonder what to choose. Let's describe some differences that should help you decide. Currently, headless mode is available only on Linux (or inside Docker). On the other hand, GUI mode is available everywhere. Headless mode doesn't require Desktop Environment nor XServer nor virtual framebuffer to be available on the device, while GUI mode in Linux obviously does. This makes Projector be able to run on headless machines such as servers in clouds. Headless mode can adapt to the connected client machine better, especially when the client has different screen parameters (DPI, resolution).","title":"Differences"},{"location":"ij_user_guide/running/#installer","text":"Installer is a console application that allows to install, configure, and run JetBrains IDEs with Projector. Currently it works on Linux or in WSL . The IDE will be run headlessly . You can find instructions in the corresponding repo: https://github.com/JetBrains/projector-installer .","title":"installer"},{"location":"ij_user_guide/running/#docker","text":"We have a sample Docker script that allows you to generate Docker images containing JetBrains IDEs and Projector inside. This allows you to run IDEs anywhere where Docker is available. The IDE will be run headlessly and isolated inside Docker. You can find instructions in the corresponding repo: https://github.com/JetBrains/projector-docker .","title":"Docker"},{"location":"ij_user_guide/running/#ide-plugin","text":"Another way of running Projector is in GUI mode. To perform this with JetBrains IDEs, we have a plugin for IDEs. You need to install the plugin. After that, the plugin will provide controls to start the screen sharing. This can be useful when you have a workstation with GUI, but need to have an option to leave the workplace and resume the work remotely. With IDE plugin that supports GUI, you don't need to restart already opened IDE. You can find instructions in the corresponding repo: https://github.com/JetBrains/projector-server/tree/master/projector-plugin .","title":"IDE Plugin"},{"location":"swing_user_guide/arbitrary/","text":"Arbitrary Swing app \u00b6 Here you can find instructions how to use an arbitrary Swing app with Projector. This page isn't ready, but as for a server, you can find instructions here: Running your app headlessly: projector-server . Running your app with GUI: projector-agent . Demo Swing app that can be run using these methods: projector-demo . Info on clients is the same as for JetBrains IDEs . If the instructions don't answer your questions and/or you want us to finish this page, feel free to open a ticket at our issue tracker .","title":"Arbitrary Swing app"},{"location":"swing_user_guide/arbitrary/#arbitrary-swing-app","text":"Here you can find instructions how to use an arbitrary Swing app with Projector. This page isn't ready, but as for a server, you can find instructions here: Running your app headlessly: projector-server . Running your app with GUI: projector-agent . Demo Swing app that can be run using these methods: projector-demo . Info on clients is the same as for JetBrains IDEs . If the instructions don't answer your questions and/or you want us to finish this page, feel free to open a ticket at our issue tracker .","title":"Arbitrary Swing app"}]}